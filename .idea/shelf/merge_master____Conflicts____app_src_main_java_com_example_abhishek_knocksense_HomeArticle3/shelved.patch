Index: app/src/main/java/com/example/abhishek/knocksense/HomeArticleRecyclerViewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/abhishek/knocksense/HomeArticleRecyclerViewAdapter.java	(date 1504669893000)
+++ app/src/main/java/com/example/abhishek/knocksense/HomeArticleRecyclerViewAdapter.java	(revision )
@@ -3,9 +3,12 @@
 import android.app.FragmentManager;
 import android.content.Context;
 import android.graphics.Bitmap;
+<<<<<<< HEAD
 import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentTransaction;
+=======
+>>>>>>> master
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -16,8 +19,11 @@
 
 import com.example.abhishek.knocksense.HomeFragment.OnListFragmentInteractionListener;
 import com.example.abhishek.knocksense.components.Article;
+<<<<<<< HEAD
 import com.example.abhishek.knocksense.components.GlobalLists;
 import com.example.abhishek.knocksense.components.ListObserver;
+=======
+>>>>>>> master
 import com.nostra13.universalimageloader.core.ImageLoader;
 import com.nostra13.universalimageloader.core.assist.FailReason;
 import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;
@@ -29,7 +35,11 @@
  * specified {@link OnListFragmentInteractionListener}.
  * TODO: Replace the implementation with code for your data type.
  */
+<<<<<<< HEAD
 public class HomeArticleRecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements ListObserver {
+=======
+public class HomeArticleRecyclerViewAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
+>>>>>>> master
 
     private List<Article> mValues;
     private final OnListFragmentInteractionListener mListener;
@@ -47,17 +57,34 @@
 
     @Override
     public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+<<<<<<< HEAD
         if(viewType==1 || viewType==2 ||viewType==3 ||viewType==4  ){
+=======
+        if(viewType==1 || viewType==2 || viewType==3 || viewType==4 ){
+>>>>>>> master
             View view = LayoutInflater.from(parent.getContext())
                     .inflate(R.layout.article_item_row, parent, false);
             return new SingleArticleViewHolder(view);
         }
+<<<<<<< HEAD
         if(viewType ==0){
+=======
+       if(viewType ==0){
+>>>>>>> master
             View view = LayoutInflater.from(parent.getContext())
                     .inflate(R.layout.article_big_item_row, parent, false);
             return new BigArticleViewHolder(view);
         }
+<<<<<<< HEAD
         if(viewType==-999){
+=======
+       /* if (viewType==5 || viewType==6)
+        {
+            View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.ar,parent,false);
+            return new TwoArticleViewHolder(view);
+        }
+       */ if(viewType==-999){
+>>>>>>> master
             return null;
         }
         return null;
@@ -66,15 +93,26 @@
 
     @Override
     public void onBindViewHolder(RecyclerView.ViewHolder h, int position) {
+<<<<<<< HEAD
         DateConverter dateConverter=new DateConverter();
         if(position%5==1 || position%5==2 || position%5==3 || position%5==4){
             final SingleArticleViewHolder holder=(SingleArticleViewHolder) h;
+=======
+        DateConverter dateConverter = new DateConverter();
+        if (position % 5== 1 || position % 5 == 2 || position % 5 == 3 || position % 5 == 4) {
+
+            SingleArticleViewHolder holder = (SingleArticleViewHolder) h;
+>>>>>>> master
             holder.mItem = mValues.get(position);
             holder.title.setText(mValues.get(position).getTitle());
             holder.author.setText(mValues.get(position).getAuthor());
             holder.date.setText(mValues.get(position).getDate());
 
+<<<<<<< HEAD
             holder.date.setText(dateConverter.getDate(mValues.get(position).getDate())+" "+ dateConverter.getMonth(mValues.get(position).getDate())+ " "+dateConverter.getYear(mValues.get(position).getDate()));
+=======
+            holder.date.setText(dateConverter.getDate(mValues.get(position).getDate()) + " " + dateConverter.getMonth(mValues.get(position).getDate()) + " " + dateConverter.getYear(mValues.get(position).getDate()));
+>>>>>>> master
 
             ImageLoader.getInstance().displayImage(mValues.get(position).getFeaturedImage(), holder.featuredImage, new ImageLoadingListener() {
                 @Override
@@ -98,6 +136,7 @@
                 }
             });
 
+<<<<<<< HEAD
             holder.mView.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View v) {
@@ -123,7 +162,32 @@
             holder.title.setText(mValues.get(position).getTitle());
           //  holder.author.setText(mValues.get(position).getAuthor());
            // holder.date.setText(dateConverter.getDate(mValues.get(position).getDate())+" "+ dateConverter.getMonth(mValues.get(position).getDate())+ " "+dateConverter.getYear(mValues.get(position).getDate()));
+=======
+//            holder.mView.setOnClickListener(new View.OnClickListener() {
+//                @Override
+//                public void onClick(View v) {
+//                    if (null != mListener) {
+//                        // Notify the active callbacks interface (the activity, if the
+//                        // fragment is attached to one) that an item has been selected.
+//                        mListener.onListFragmentInteraction(holder.mItem);
+//                    }
+//                }
+//            });
+//            holder.mView.findViewById(R.id.article_item_row_more).setOnClickListener(new View.OnClickListener() {
+//                @Override
+//                public void onClick(View v) {
+//                    //// TODO: 26-08-2017 save and share functionality
+//                }
+//            });
+        } else if (position % 5 == 0) {
+            BigArticleViewHolder holder = (BigArticleViewHolder) h;
 
+            holder.mItem = mValues.get(position);
+            holder.title.setText(mValues.get(position).getTitle());
+            //  holder.author.setText(mValues.get(position).getAuthor());
+            // holder.date.setText(dateConverter.getDate(mValues.get(position).getDate())+" "+ dateConverter.getMonth(mValues.get(position).getDate())+ " "+dateConverter.getYear(mValues.get(position).getDate()));
+>>>>>>> master
+
             ImageLoader.getInstance().displayImage(mValues.get(position).getFeaturedImage(), holder.big_item_row_image, new ImageLoadingListener() {
                 @Override
                 public void onLoadingStarted(String s, View view) {
@@ -163,11 +227,121 @@
                     //// TODO: 26-08-2017 save and share functionality
                 }
             });*/
+<<<<<<< HEAD
         }
 
     }
 
+=======
+        }/* else if (position % 7 == 5 || position % 7 == 6) {
+
+            TwoArticleViewHolder holder = (TwoArticleViewHolder) h;
+            holder.mItem = mValues.get(position);
+            holder.title_left.setText(mValues.get(position).getTitle());
+
+            // holder.author.setText(mValues.get(position).getAuthor());
+            //holder.date.setText(mValues.get(position).getDate());
+
+            // holder.date.setText(dateConverter.getDate(mValues.get(position).getDate())+" "+ dateConverter.getMonth(mValues.get(position).getDate())+ " "+dateConverter.getYear(mValues.get(position).getDate()));
+
+            ImageLoader.getInstance().displayImage(mValues.get(position).getFeaturedImage(), holder.two_article_row_image_left, new ImageLoadingListener() {
-    @Override
+                @Override
+                public void onLoadingStarted(String s, View view) {
+                    //finalHolder.progressBar.setVisibility(View.VISIBLE);
+                }
+
+                @Override
+                public void onLoadingFailed(String s, View view, FailReason failReason) {
+
+                }
+
+                @Override
+                public void onLoadingComplete(String s, View view, Bitmap bitmap) {
+                    //  finalHolder.progressBar.setVisibility(View.GONE);
+                }
+
+                @Override
+                public void onLoadingCancelled(String s, View view) {
+
+                }
+            });
+
+//            holder.mView.setOnClickListener(new View.OnClickListener() {
+//                @Override
+//                public void onClick(View v) {
+//                    if (null != mListener) {
+//                        // Notify the active callbacks interface (the activity, if the
+//                        // fragment is attached to one) that an item has been selected.
+//                        mListener.onListFragmentInteraction(holder.mItem);
+//                    }
+//                }
+//            });
+//            holder.mView.findViewById(R.id.article_item_row_more).setOnClickListener(new View.OnClickListener() {
+//                @Override
+//                public void onClick(View v) {
+//                    //// TODO: 26-08-2017 save and share functionality
+//                }
+//            });
+
+
+            //  TwoArticleViewHolder holder=(TwoArticleViewHolder) h;
+
+            holder.mItem = mValues.get(position);
+            holder.title_right.setText(mValues.get(position).getTitle());
+
+            // holder.author.setText(mValues.get(position).getAuthor());
+            //holder.date.setText(mValues.get(position).getDate());
+
+            // holder.date.setText(dateConverter.getDate(mValues.get(position).getDate())+" "+ dateConverter.getMonth(mValues.get(position).getDate())+ " "+dateConverter.getYear(mValues.get(position).getDate()));
+
+            ImageLoader.getInstance().displayImage(mValues.get(position).getFeaturedImage(), holder.two_article_row_image_right, new ImageLoadingListener() {
+                @Override
+                public void onLoadingStarted(String s, View view) {
+                    //finalHolder.progressBar.setVisibility(View.VISIBLE);
+                }
+
+                @Override
+                public void onLoadingFailed(String s, View view, FailReason failReason) {
+
+                }
+
+                @Override
+                public void onLoadingComplete(String s, View view, Bitmap bitmap) {
+                    //  finalHolder.progressBar.setVisibility(View.GONE);
+                }
+
+                @Override
+                public void onLoadingCancelled(String s, View view) {
+
+                }
+            });
+
+//            holder.mView.setOnClickListener(new View.OnClickListener() {
+//                @Override
+//                public void onClick(View v) {
+//                    if (null != mListener) {
+//                        // Notify the active callbacks interface (the activity, if the
+//                        // fragment is attached to one) that an item has been selected.
+//                        mListener.onListFragmentInteraction(holder.mItem);
+//                    }
+//                }
+//            });
+//            holder.mView.findViewById(R.id.article_item_row_more).setOnClickListener(new View.OnClickListener() {
+//                @Override
+//                public void onClick(View v) {
+//                    //// TODO: 26-08-2017 save and share functionality
+//                }
+//            });
+
+
+        }*/
+
+    }
+
+
+
+>>>>>>> master
+    @Override
     public int getItemViewType(int position) {
         return position%5;
     }
@@ -177,12 +351,15 @@
         return mValues.size();
     }
 
+<<<<<<< HEAD
     @Override
     public void updateList(List<Article> articleList) {
         mValues= articleList;
         this.notifyDataSetChanged();
     }
 
+=======
+>>>>>>> master
     public class SingleArticleViewHolder extends RecyclerView.ViewHolder {
         public final View mView;
         public final TextView title;
@@ -228,4 +405,35 @@
             return super.toString() + " '" + author.getText() + "'";
         }
    */ }
+<<<<<<< HEAD
+=======
+   /* public class TwoArticleViewHolder extends RecyclerView.ViewHolder {
+        public final View mView;
+        public final TextView title_left;
+        public  final TextView title_right;
+        public final ImageView two_article_row_image_left;
+        public final ImageView two_article_row_image_right;
+
+        // public final TextView author;
+        //public final TextView date;
+        public Article mItem;
+       // public final ImageView big_item_row_image;
+        public TwoArticleViewHolder(View view) {
+            super(view);
+            mView = view;
+            title_left = (TextView) view.findViewById(R.id.two_item_row_left_content);
+            title_right=(TextView)view.findViewById(R.id.two_item_row_right_content) ;
+            //author = (TextView) view.findViewById(R.id.big_item_row_author);
+            //  date = (TextView) view.findViewById(R.id.big_item_row_date);
+            two_article_row_image_left=(ImageView)view.findViewById(R.id.two_item_row_image_left);
+            two_article_row_image_right=(ImageView)view.findViewById(R.id.two_item_row_image_right);
+
+        }
+
+        /*@Override
+        public String toString() {
+            return super.toString() + " '" + author.getText() + "'";
+        }
+   */
+>>>>>>> master
 }
\ No newline at end of file
